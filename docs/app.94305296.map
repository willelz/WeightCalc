{"version":3,"sources":["ts/shape.ts","ts/tab.ts","ts/app.ts"],"names":[],"mappings":"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","file":"app.94305296.map","sourceRoot":"..","sourcesContent":["interface Shape {\n  calc(density: number): number;\n}\n\n//直方体\nclass Cuboid implements Shape {\n  public constructor(\n    private vertical: number,\n    private horizontal: number,\n    private height: number\n  ) {}\n  public calc(density: number) {\n    return this.vertical * this.horizontal * this.height * density;\n  }\n}\n\n//円柱\nclass Cylinder implements Shape {\n  public constructor(private diameter: number, private height: number) {}\n  public calc(density: number) {\n    const r = this.diameter / 2;\n    return r * r * Math.PI * this.height * density;\n  }\n}\n\n//H鋼\nclass HBeam implements Shape {\n  public constructor(\n    private vertical: number,\n    private horizontal: number,\n    private verticalWidth: number,\n    private horizontalWidth: number,\n    private length: number\n  ) {}\n  public calc(density: number) {\n    const ll = this.vertical * this.verticalWidth * 2; //縦2つ\n    const hh =\n      (this.horizontal - this.verticalWidth * 2) * this.horizontalWidth; //横\n    return (ll + hh) * this.length * density;\n  }\n}\n\n//パイプ形\nclass Pipe implements Shape {\n  public constructor(\n    private diameter: number,\n    private height: number,\n    private thickness: number\n  ) {}\n  calc(density: number) {\n    const r = this.diameter / 2;\n    const ir = r - this.thickness;\n    return (r * r - ir * ir) * Math.PI * this.height * density;\n  }\n}\n\n//チャンネル\nclass Channel implements Shape {\n  public constructor(\n    private vertical: number,\n    private horizontal: number,\n    private length: number,\n    private t1: number,\n    private t2: number\n  ) {}\n  calc(density: number) {\n    const ll = (this.vertical - this.t1) * this.t2 * 2;\n    const hh = this.horizontal * this.t1;\n    return (ll + hh) * this.length * density;\n  }\n}\n\n//アングル\nclass Angle implements Shape {\n  public constructor(\n    private vertical: number,\n    private horizontal: number,\n    private length: number,\n    private tv: number,\n    private th: number\n  ) {}\n  calc(density: number) {\n    const v = (this.vertical - this.th) * this.tv;\n    const h = this.th * (this.horizontal - this.tv);\n    const o = this.th * this.tv;\n    return (v + h + o) * this.length * density;\n  }\n}\n\n//角パイプ\nclass SquarePipe implements Shape {\n  public constructor(\n    private vertical: number,\n    private horizontal: number,\n    private height: number,\n    private thickness: number\n  ) {}\n  calc(density: number) {\n    const outSide = this.vertical * this.horizontal;\n    const inSide =\n      (this.vertical - 2 * this.thickness) *\n      (this.horizontal - 2 * this.thickness);\n    return (outSide - inSide) * this.height * density;\n  }\n}\n\nenum ShapeType {\n  cuboid,\n  cylinder,\n  hbeam,\n  pipe,\n  channel,\n  angle,\n  squarePipe\n}\n\nclass ShapeFactory {\n  //今表示されているものを返す\n  private getShapeType(): ShapeType {\n    const content = document.getElementById(\"tab_content\");\n    if (!content) throw new Error(\"No tab_content\");\n    const shapes = content.getElementsByTagName(\"section\");\n\n    for (let i = 0; i < shapes.length; i++) {\n      if (shapes[i].style.display === \"block\") {\n        switch (shapes[i].id) {\n          case \"cuboid\":\n            return ShapeType.cuboid;\n          case \"cylinder\":\n            return ShapeType.cylinder;\n          case \"hbeam\":\n            return ShapeType.hbeam;\n          case \"pipe\":\n            return ShapeType.pipe;\n          case \"channel\":\n            return ShapeType.channel;\n          case \"angle\":\n            return ShapeType.angle;\n          case \"square_pipe\":\n            return ShapeType.squarePipe;\n        }\n      }\n    }\n    throw new Error(\"No block element\");\n  }\n  //今表示されている形の値をセットして作る\n  public create(): Shape {\n    const shapeType = this.getShapeType();\n\n    //入力からmmを得る\n    const getMeter = (searchID: string): number => {\n      const element = <HTMLInputElement>document.getElementById(searchID);\n      const box = Number(element.value);\n      const unit = <HTMLInputElement>(\n        document.getElementById(searchID + \"_unit\")\n      );\n\n      switch (unit.value) {\n        case \"mm\":\n          return box / 1000;\n        case \"M\":\n          return box;\n        default:\n          throw new Error(\"unit error\");\n      }\n    };\n\n    switch (shapeType) {\n      case ShapeType.cuboid:\n        const v = getMeter(\"cuboid_vertical\"); //mmを期待しているためMにする\n        const h = getMeter(\"cuboid_horizontal\");\n        const he = getMeter(\"cuboid_height\");\n        return new Cuboid(v, h, he);\n      case ShapeType.cylinder:\n        const di = getMeter(\"cylinder_diameter\");\n        const ch = getMeter(\"cylinder_height\");\n        return new Cylinder(di, ch);\n      case ShapeType.hbeam:\n        const hv = getMeter(\"hbeam_vertical\");\n        const hh = getMeter(\"hbeam_horizontal\");\n        const t2 = getMeter(\"hbeam_vertical_width\");\n        const t1 = getMeter(\"hbeam_horizontal_width\");\n        const hl = getMeter(\"hbeam_length\");\n        return new HBeam(hv, hh, t2, t1, hl);\n      case ShapeType.pipe:\n        const pd = getMeter(\"pipe_diameter\");\n        const ph = getMeter(\"pipe_height\");\n        const pt = getMeter(\"pipe_thickness\");\n        return new Pipe(pd, ph, pt);\n      case ShapeType.channel:\n        const cv = getMeter(\"channel_vertical\");\n        const chh = getMeter(\"channel_horizontal\");\n        const cl = getMeter(\"channel_length\");\n        const ct1 = getMeter(\"channel_t1\");\n        const ct2 = getMeter(\"channel_t2\");\n        return new Channel(cv, chh, cl, ct1, ct2);\n      case ShapeType.angle:\n        const av = getMeter(\"angle_vertical\");\n        const ah = getMeter(\"angle_horizontal\");\n        const al = getMeter(\"angle_length\");\n        const atv = getMeter(\"angle_tv\");\n        const ath = getMeter(\"angle_th\");\n        return new Angle(av, ah, al, atv, ath);\n      case ShapeType.squarePipe:\n        const sv = getMeter(\"square_pipe_vertical\");\n        const sh = getMeter(\"square_pipe_horizontal\");\n        const she = getMeter(\"square_pipe_height\");\n        const st = getMeter(\"square_pipe_thickness\");\n        return new SquarePipe(sv, sh, she, st);\n      default:\n        throw new Error(\"shapeType Error\");\n    }\n  }\n}\n\n//計算ボタンを押した時\nexport function calc() {\n  const shape = new ShapeFactory().create();\n  const d = Number((<HTMLInputElement>document.getElementById(\"blood\")).value);\n  const ans = shape.calc(d) * 1000; //トンが帰ってくるためkgにする\n  const weight = <HTMLInputElement>document.getElementById(\"weight\");\n  weight.value = ans.toFixed(2); //小数点以下2桁までにする\n}\n","//タブ切り替え\nexport default function() {\n  const menu = document.getElementById(\"menu\");\n  const content = document.getElementById(\"tab_content\");\n  if (!menu) {\n    throw new Error(\"menu error\");\n  }\n  let menus = menu.getElementsByTagName(\"a\");\n  let current: { page: HTMLElement; menu: HTMLElement };\n\n  for (let i = 0; i < menus.length; i++) {\n    tab_init(menus[i]);\n  }\n\n  function tab_init(link: HTMLAnchorElement) {\n    const id = link.hash.slice(1);\n    const page = document.getElementById(id);\n    if (!page) throw new Error(id + \"は存在しない\");\n\n    if (!current) {\n      // 状態の初期化\n      current = { page: page, menu: link };\n      page.style.display = \"block\";\n      link.className = \"active\";\n    } else {\n      page.style.display = \"none\";\n    }\n    link.onclick = function() {\n      //カレントを消す\n      current.page.style.display = \"none\";\n      page.style.display = \"block\";\n      //カレントを自分にする\n      current.page = page;\n      current.menu = link;\n\n      //ページ移動時計算結果をクリア\n      const weight = <HTMLInputElement>document.getElementById(\"weight\");\n      weight.value = \"\";\n      return false; //href属性無効\n    };\n  }\n}\n","import \"../node_modules/purecss/build/base-min.css\";\nimport \"../node_modules/purecss/build/forms-min.css\";\nimport \"../node_modules/purecss/build/buttons-min.css\";\nimport \"../css/style.css\";\n\nimport { calc } from \"./shape\";\nimport tab from \"./tab\";\ntab();\n\n//計算登録\nconst btn = document.getElementById(\"calc_button\");\nif (btn) btn.onclick = calc;\n\n//hack for parcel-plugin-sw-cache\nconst swName = \"service-worker.js\"\nnavigator.serviceWorker.register(swName);\n"]}